name: pre-commit-monorepo
description: Run pre-commit hooks in a monorepo context

inputs:
  args:
    description: arguments to pass to pre-commit run
    required: false
  python-version:
    description: python version
    required: false
    default: latest
  skip:
    description: comma separated list of hooks id to skip
    required: false
    default: no-commit-to-branch
  version:
    description: pre-commit version
    required: false
    default: latest
  workdir:
    description: change working directory for pre-commit run
    required: true

runs:
  using: composite
  steps:
    - name: Get latest Python version
      id: python-version
      if: inputs.python-version == 'latest'
      uses: nikaro/actions/get-latest-version@e77a13149bd439f1dce6e1ab7eee379855f71a0e # 1.6.1
      with:
        package: python

    - name: Setup Python
      id: setup-python
      uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
      with:
        python-version: ${{ inputs.python-version == 'latest' && steps.python-version.outputs.version || inputs.python-version }}
        check-latest: ${{ inputs.python-version == 'latest' && 'true' }}

    - name: Get latest pre-commit version
      id: pre-commit-version
      if: inputs.version == 'latest'
      uses: nikaro/actions/get-latest-version@e77a13149bd439f1dce6e1ab7eee379855f71a0e # 1.6.1
      with:
        package: pre-commit
        manager: pypi

    - name: Cache pre-commit virtualenv
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        key: pre-commit-venv-py${{ steps.setup-python.outputs.python-version }}-pc${{ inputs.version == 'latest' && steps.pre-commit-version.outputs.version || inputs.version }}
        path: .venv

    - name: Install pre-commit
      shell: bash
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install pre-commit==${{ inputs.version == 'latest' && steps.pre-commit-version.outputs.version || inputs.version }}
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV

    - name: Restore pre-commit cache
      uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-py${{ steps.setup-python.outputs.python-version }}-pc${{ inputs.version == 'latest' && steps.pre-commit-version.outputs.version || inputs.version }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-py${{ steps.setup-python.outputs.python-version }}-pc${{ inputs.version == 'latest' && steps.pre-commit-version.outputs.version || inputs.version }}-
          pre-commit-py${{ steps.setup-python.outputs.python-version }}-
          pre-commit-
      id: cache-pre-commit

    - name: Install pre-commit hooks
      shell: bash
      run: pre-commit install-hooks

    - name: Save pre-commit cache
      if: steps.cache-pre-commit.outputs.cache-hit != 'true'
      uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-py${{ steps.setup-python.outputs.python-version }}-pc${{ inputs.version == 'latest' && steps.pre-commit-version.outputs.version || inputs.version }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit in working directory
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: git ls-files -- . | xargs pre-commit run --show-diff-on-failure --color=always ${{ inputs.args }} --files
      env:
        SKIP: ${{ inputs.skip }}
